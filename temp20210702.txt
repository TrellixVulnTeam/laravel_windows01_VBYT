C:\xampp\htdocs\lara01_git\laravel_windows01\app\Http\Controllers\HelloController.php

<?php

namespace App\Http\Controllers;
use App\Person;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Storage;

class HelloController extends Controller
{
    private $fname;
    function __construct(){
        $this->fname = 'hello.txt';
    }
    public function index()
    {
        //$sample_msg = $this->fname;
        $sample_msg = Storage::disk('public')->url($this->fname);
        $sample_data = Storage::disk('public')->get($this->fname);
        $data = [
            'msg' => $sample_msg,
            'data' => explode(PHP_EOL,$sample_data)
        ];
        return view('hello.index',$data);
    }
    public function other($msg){
        Storage::disk('public')->prepend($this->fname,$msg);
        return redirect()->route('hello');
    }
}

    private $fname;
    function __construct(){
        $this->fname = 'hello.txt';
    }
    public function index()
    {
        //$sample_msg = $this->fname;
        $url = Storage::disk('public')->url($this->fname);
        $size = Storage::disk('public')->size($this->fname);
        $modified = Storage::disk('public')->lastModified($this->fname);
        $modified_time = date('y-m-d H:i:s',$modified);
        
        $sample_keys = ['url','size','modified'];
        $sample_meta = [$url,$size,$modified_time];

        $result = '<table><tr><th>'.implode('</th><th>', $sample_keys).'</th></tr>';
        $result .= '<tr><td>'.implode('</td><td>', $sample_meta).'</td></tr></table>';

        $sample_data = Storage::disk('public')->get($this->fname);
        $data = [
            'msg' => $result,
            'data' => explode(PHP_EOL,$sample_data)
        ];
        return view('hello.index',$data);
    }


    public function other($msg){
        Storage::disk('public')->delete('bk_'.$this->fname);
        Storage::disk('public')->copy($this->fname,'bk_'.$this->fname);

        Storage::disk('local')->delete('bk_'.$this->fname);
        Storage::disk('local')->move('public/bk_'.$this->fname,'bk_'.$this->fname);

        return redirect()->route('hello');
    }


    public function other($msg){
        if(Storage::disk('public')->exists('bk_'.$this->fname)){
            Storage::disk('public')->delete('bk_'.$this->fname);
        }
        Storage::disk('public')->copy($this->fname,'bk_'.$this->fname);
        if(Storage::disk('local')->exists('bk_'.$this->fname)){
            Storage::disk('local')->delete('bk_'.$this->fname);
        }
        Storage::disk('local')->move('public/bk_'.$this->fname,'bk_'.$this->fname);

        return redirect()->route('hello');
    }


    public function other($msg){
        return Storage::disk('public')->download($this->fname);
    }

hello/index.blade.php
	<p><a href="/hello/other">download</a></p>


        <form action="/hello/other" method="post" 
            enctype="multipart/form-data">
            @csrf
            <input type="file" name="file">
            <input type="submit">
        </form>


    public function other(Request $request){
        Storage::disk('local')->
        putFile('files', $request->file('file'));
        return redirect()->route('hello');
    }

    public function other(Request $request){
        $ext = '.'.$request->file('file')->extension();
        Storage::disk('public')->
        putFileAs('files', $request->file('file'),'uploaded'.$ext);
        return redirect()->route('hello');
    }


    public function index()
    {
        $dir = '/';
        $all = Storage::disk('local')->allfiles($dir);
        
        $data = [
            'msg'=> 'DIR: ' . $dir,
            'data'=> $all
        ];
        return view('hello.index', $data);
    }

	$all = Storage::disk('logs')->allfiles($dir);
	$all = Storage::disk('win')->allfiles($dir);
	$all = Storage::disk('ftp')->allfiles($dir);

hello/index.blade.php
<!DOCTYPE html>
<html lang="ja">
    <head>
        <meta charset="utf-8">
        <title>Index</title>
    </head>
    <body>
    	<h1>Hello/Index</h1>
    	<p>{!!$msg!!}</p>
    	<form action="/hello" method="post">
        	@csrf
        	<input type="text" name="msg">
        	<input type="submit">
    	</form>
    </body>
</html>


C:\xampp\htdocs\lara01_git\laravel_windows01\app\Http\Controllers\HelloController.php

<?php

namespace App\Http\Controllers;
use App\Person;
use Illuminate\Http\Request;
use Illuminate\Http\Response;

class HelloController extends Controller
{
    public function index(Request $request)
    {
        $msg = 'please input text:';
        if ($request->isMethod('post'))
        {
            $msg = 'you typed: "' . $request->input('msg') . '"';
        }
        $data = [
            'msg'=> $msg,
        ];
        return view('hello.index', $data);
    }
}


C:\xampp\htdocs\lara01_git\laravel_windows01\app\Http\Controllers\HelloController.php

public function index(Request $request)
    {
        $msg = 'please input text:';
        $keys = [];
        $values = [];
        if ($request->isMethod('post'))
        {
            $form = $request->all();
            $keys = array_keys($form);
            $values = array_values($form);
        }
        $data = [
            'msg'=> $msg,
            'keys' => $keys,
            'values' => $values,
        ];
        return view('hello.index', $data);
    }

hello/index.blade.php
<!DOCTYPE html>
<html lang="ja">
    <head>
        <meta charset="utf-8">
        <title>Index</title>
    </head>
    <body>
        <h1>Hello/Index</h1>
        <p>{!!$msg!!}</p>
        <form action="/hello" method="post">
            @csrf
            <div>NAME:<input type="text" name="name"></div>
            <div>MAIL:<input type="text" name="mail"></div>
            <div>TEL: <input type="text" name="tel"></div>
            <input type="submit">
        </form>
        <hr>
        <ol>
        @for($i = 0;$i < count($keys);$i++)
            <li>{{$keys[$i]}}：{{$values[$i]}}</li>
        @endfor
        </ol>
    </body>
</html>

C:\xampp\htdocs\lara01_git\laravel_windows01\app\Http\Controllers\HelloController.php

    public function index(Request $request, Response $response)
    {
        $msg = 'please input text:';
        $keys = [];
        $values = [];
        if ($request->isMethod('post'))
        {
            $form = $request->all();
            $result = '<html><body>';
            foreach($form as $key => $value)
            {
                $result .= $key . ': ' . $value . "<br>";
            }
            $result .= '</body></html>';
            $response->setContent($result);
            return $response;
        }
        $data = [
            'msg'=> $msg,
            'keys' => $keys,
            'values' => $values,
        ];
        return view('hello.index', $data);
    }


public function index(Request $request, Response $response)
{
    $msg = 'please input text:';
    $keys = [];
    $values = [];
    if ($request->isMethod('post'))
    {
        $form = $request->only(['name', 'mail']);
        $keys = array_keys($form);
        $values = array_values($form);
        $data = [
            'msg'=>'you inputted.',
            'keys'=>$keys,
            'values'=>$values,
        ];
        return view('hello.index', $data);
    }
    $data = [
        'msg'=> $msg,
        'keys'=>$keys,
        'values'=>$values,
    ];
    return view('hello.index', $data);
}



    public function index(Request $request, Response $response)
    {
        $msg = 'please input text:';
        $keys = [];
        $values = [];
        if ($request->isMethod('post'))
        {
            $form = $request->only(['name', 'mail', 'tel']);
            $keys = array_keys($form);
            $values = array_values($form);
            $msg =  old('name') . ', ' . old('mail') 
                    . ', ' . old('tel');
            $data = [
                'msg' => $msg,
                'keys' => $keys,
                'values' => $values,
            ];
            $request->flash();
            return view('hello.index', $data);
        }
        $data = [
            'msg'=> $msg,
            'keys'=>$keys,
            'values'=>$values,
        ];
            
        $request->flash();
        return view('hello.index', $data);
    }

hello/index.blade.php
        <form action="/hello" method="post">
            @csrf
            <div>NAME:<input type="text" name="name" value="{{old('name')}}"></div>
            <div>MAIL:<input type="text" name="mail" value="{{old('mail')}}"></div>
            <div>TEL: <input type="text" name="tel" value="{{old('tel')}}"></div>
            <input type="submit">
        </form>


<form action="/hello" method="get">



C:\xampp\htdocs\lara01_git\laravel_windows01\app\Http\Controllers\HelloController.php

    public function index(Request $request, Response $response)
    {
        $name = $request->query('name');
        $mail = $request->query('mail');
        $tel = $request->query('tel');
        $msg = $name . ', ' . $mail . ', ' . $tel;
        $keys = ['名前','メール','電話'];
        $values = [$name, $mail, $tel];
        $data = [
            'msg'=> $msg,
            'keys'=>$keys,
            'values'=>$values,
        ];
        $request->flash();
        return view('hello.index', $data);
    }


    public function index(Request $request, Response $response)
    {
        $name = $request->query('name');
        $mail = $request->query('mail');
        $tel = $request->query('tel');
        $msg = $request->query('msg');
        $keys = ['名前','メール','電話'];
        $values = [$name, $mail, $tel];
        $data = [
            'msg'=> $msg,
            'keys'=>$keys,
            'values'=>$values,
        ];
        $request->flash();


        return view('hello.index', $data);
    }


    public function other()
    {
        $data = [
            'name' => 'Taro',
            'mail' => 'taro@yamada',
            'tel' => '090-999-999',
        ];
        $query_str = http_build_query($data);
        $data['msg'] = $query_str;
        return redirect()->route('hello', $data);
    }


C:\xampp\htdocs\lara01_git\laravel_windows01\routes\web.php
Route::get('hello', [HelloController::class, 'index'])->name('hello');
Route::post('hello', [HelloController::class, 'index']);
Route::get('hello/other', [HelloController::class, 'other']);

C:\xampp\htdocs\lara01_git\laravel_windows01\app\MyClasses
<?php
namespace App\MyClasses;


class MyService
{
    private $msg;
    private $data;


    public function __construct()
    {
        $this->msg = 'Hello! This is MyService!';
        $this->data = ['Hello', 'Welcome', 'Bye'];
    }


    public function say()
    {
        return $this->msg;
    }


    public function data()
    {
        return $this->data;
    }
}

hello/index.blade.php
    <body>
        <h1>Hello/Index</h1>
        <p>{!!$msg!!}</p>
        <ul>
        @foreach($data as $item)
        <li>{!!$item!!}</li>
        @endforeach
        </ul>
    </body>

C:\xampp\htdocs\lara01_git\laravel_windows01\app\Http\Controllers\HelloController.php

    public function index()
    {
        $myservice = app('App\MyClasses\MyService'); // ☆
        $data = [
            'msg'=> $myservice->say(),
            'data'=> $myservice->data()
        ];
        return view('hello.index', $data);
    }


$myservice = app()->make('App\MyClasses\MyService'); // ☆
$myservice = resolve('App\MyClasses\MyService'); // ☆

C:\xampp\htdocs\lara01_git\laravel_windows01\app\MyClasses
<?php
namespace App\MyClasses;

class MyService
{
    private $id = -1;
    private $msg = 'no id...';
    private $data = ['Hello', 'Welcome', 'Bye'];


    public function __construct(int $id = -1)
    {
        if ($id >= 0)
        {
            $this->id = $id;
            $this->msg = 'select: ' . $this->data[$id];
        }
    }


    public function say()
    {
        return $this->msg;
    }


    public function data(int $id)
    {
        return $this->data[$id];
    }


    public function alldata()
    {
        return $this->data;
    }
}

C:\xampp\htdocs\lara01_git\laravel_windows01\app\Http\Controllers\HelloController.php

    public function index(int $id = -1)
    {
        $myservice = app()->makeWith('App\MyClasses\MyService', 
            ['id' => $id]);
        $data = [
            'msg'=> $myservice->say($id),
            'data'=> $myservice->alldata()
        ];
        return view('hello.index', $data);
    }

C:\xampp\htdocs\lara01_git\laravel_windows01\app\MyClasses

<?php
namespace App\MyClasses;

class MyService
{
    
    private $id = -1;
    private $msg = 'no id...';
    private $data = ['Hello', 'Welcome', 'Bye'];


    public function __construct()
    {
    }


    public function setId($id)
    {
        $this->id = $id;
        if ($id >= 0 && $id < count($this->data))
        {
            $this->msg = "select  id:" . $id
                . ', data:"' . $this->data[$id] . '"';
        }
    }


    public function say()
    {
        return $this->msg;
    }


    public function data(int $id)
    {
        return $this->data[$id];
    }


    public function alldata()
    {
        return $this->data;
    }
}


C:\xampp\htdocs\lara01_git\laravel_windows01\app\Providers\AppServiceProvider.php
use App\MyClasses\MyService;    
public function boot()
    {
        //
        app()->bind('App\MyClasses\MyService', 
                function ($app) {
            $myservice = new MyService();
            $myservice->setId(0);
            return $myservice;
        });
    }

C:\xampp\htdocs\lara01_git\laravel_windows01\routes\web.php
Route::get('hello/{id}', [HelloController::class, 'index']);
Route::get('hello', [HelloController::class, 'index']);

C:\xampp\htdocs\lara01_git\laravel_windows01\app\Http\Controllers\HelloController.php

    public function index(MyService $myservice, int $id = -1)
    {
        $myservice->setId($id);
        $data = [
            'msg'=> $myservice->say($id),
            'data'=> $myservice->alldata()
        ];
        return view('hello.index', $data);
    }

C:\xampp\htdocs\lara01_git\laravel_windows01\app\MyClasses

<?php
namespace App\MyClasses;

class MyService
{  
    private $serial;
    private $id = -1;
    private $msg = 'no id...';
    private $data = ['Hello', 'Welcome', 'Bye'];


    function __construct()
    {
        $this->serial = rand();
        echo "「" . $this->serial . "」";
    }


    public function setId($id)
    {
        $this->id = $id;
        if ($id >= 0 && $id < count($this->data))
        {
            $this->msg = "select  id:" . $id
                . ', data:"' . $this->data[$id] . '"';
        }
    }


    public function say()
    {
        return $this->msg;
    }


    public function data(int $id)
    {
        return $this->data[$id];
    }


    public function alldata()
    {
        return $this->data;
    }
    
}


C:\xampp\htdocs\lara01_git\laravel_windows01\app\Http\Controllers\HelloController.php

class HelloController extends Controller
{
    function __construct(MyService $myservice)
    {
        $myservice = app('App\MyClasses\MyService');
    }


    public function index(MyService $myservice, int $id = -1)
    {
        $myservice->setId($id);
        $data = [
            'msg'=> $myservice->say($id),
            'data'=> $myservice->alldata()
        ];
        return view('hello.index', $data);
    }
    
}

C:\xampp\htdocs\lara01_git\laravel_windows01\app\Providers\AppServiceProvider.php

    app()->singleton('App\MyClasses\MyService', 
            function ($app) {
        $myservice = new MyService();
        $myservice->setId(0);
        return $myservice;
    });


C:\xampp\htdocs\lara01_git\laravel_windows01\app\MyClasses
class MyService
    function __construct(int $id)
    {
        $this->setId($id);
        $this->serial = rand();
        echo "「" . $this->serial . "」";
    }


C:\xampp\htdocs\lara01_git\laravel_windows01\app\MyClasses
<?php
namespace App\MyClasses;


interface MyServiceInterface
{
    public function setId(int $id);
    public function say();
    public function allData();
    public function data(int $id);
}

C:\xampp\htdocs\lara01_git\laravel_windows01\app\Providers\AppServiceProvider.php

    public function boot()
    {
        //
        app()->bind('App\MyClasses\MyServiceInterface',
        'App\MyClasses\MyService');
    }

C:\xampp\htdocs\lara01_git\laravel_windows01\app\MyClasses
MyService.php
<?php
namespace App\MyClasses;

class MyService implements MyServiceInterface{
    private $serial;
    private $id = -1;
    private $msg = 'no id...';
    private $data = ['Hello', 'Welcome', 'Bye'];


    function __construct()
    {
        $this->serial = rand();
        echo "「" . $this->serial . "」";
    }


    public function setId($id)
    {
        $this->id = $id;
        if ($id >= 0 && $id < count($this->data))
        {
            $this->msg = "select  id:" . $id
                . ', data:"' . $this->data[$id] . '"';
        }
    }


    public function say()
    {
        return $this->msg;
    }


    public function data(int $id)
    {
        return $this->data[$id];
    }


    public function alldata()
    {
        return $this->data;
    }
    
}

MyServiceInterface.php
<?php
namespace App\MyClasses;

interface MyServiceInterface
{
    public function setId(int $id);
    public function say();
    public function allData();
    public function data(int $id);
}

C:\xampp\htdocs\lara01_git\laravel_windows01\app\Providers\AppServiceProvider.php
use App\MyClasses\MyService;
use App\MyClasses\MyServiceInterface; 

    public function boot()
    {
        //
        app()->bind('App\MyClasses\MyServiceInterface','App\MyClasses\MyService');
    }


C:\xampp\htdocs\lara01_git\laravel_windows01\app\MyClasses
PowerMyService.php
<?php
namespace App\MyClasses;


class PowerMyService implements MyServiceInterface
{  
    private $id = -1;
    private $msg = 'no id...';
    private $data = ['いちご','リンゴ','バナナ','みかん','ぶどう'];


    function __construct()
    {
        $this->setId(rand(0, count($this->data)));
    }


    public function setId($id)
    {
        if ($id >= 0 && $id < count($this->data))
        {
            $this->id = $id;
            $this->msg = "あなたが好きなのは、" . $id
                . '番の' . $this->data[$id] . 'ですね！';
        }
    }


    public function say()
    {
        return $this->msg;
    }


    public function data(int $id)
    {
        return $this->data[$id];
    }
    public function setData($data)
    {
        $this->data = $data;
    }


    public function alldata()
    {
        return $this->data;
    }
    
}

C:\xampp\htdocs\lara01_git\laravel_windows01\app\Providers\AppServiceProvider.php

    public function boot()
    {
        //
        app()->bind('App\MyClasses\MyServiceInterface','App\MyClasses\PowerMyService');
    }

use App\MyClasses\PowerMyService;

    public function boot()
    {
        //

        app()->resolving(function ($obj, $app) {
            if (is_object($obj))
            {
                echo get_class($obj) . '<br>';
            }
            else
            {
                echo $obj . '<br>';
            }
            
        });
        
        app()->resolving(PowerMyService::class, function ($obj, $app) {
            $newdata = ['ハンバーグ','カレーライス','唐揚げ','餃子'];
            $obj->setData($newdata);
            $obj->setId(rand(0, count($newdata)));
        });

        app()->singleton('App\MyClasses\MyServiceInterface',
            'App\MyClasses\PowerMyService');

    }

php artisan make:provider MyServiceProvider

C:\xampp\htdocs\lara01_git\laravel_windows01\app\Providers
MyServiceProvider.php
<?php

namespace App\Providers;

use Illuminate\Support\ServiceProvider;

class MyServiceProvider extends ServiceProvider
{
    public function register()
    {
        app()->singleton('App\MyClasses\MyServiceInterface',
            'App\MyClasses\PowerMyService');
        echo "<b>＜MyServiceProvider/register＞</b><br>";
    }


    public function boot()
    {
        echo "<b>＜MyServiceProvider/boot＞</b><br>";
    }
}

C:\xampp\htdocs\lara01_git\laravel_windows01\config
app.php
App\Providers\MyServiceProvider::class,

C:\xampp\htdocs\lara01_git\laravel_windows01\app\Http\Controllers\HelloController.php

class HelloController extends Controller
{


    public function index(MyServiceInterface $myservice, int $id = -1)
    {
        $myservice->setId($id);
        $data = [
            'msg'=> $myservice->say(),
            'data'=> $myservice->alldata()
        ];
        return view('hello.index', $data);
    }
    
}

C:\xampp\htdocs\lara01_git\laravel_windows01\app\Facades
MyService.php
<?php
namespace App\Facades;


use Illuminate\Support\Facades\Facade;


class MyService extends Facade {


    protected static function getFacadeAccessor() {
        return 'myservice';
    }
    
}

C:\xampp\htdocs\lara01_git\laravel_windows01\config
app.php
'myservice' => App\Facades\MyService::class,

C:\xampp\htdocs\lara01_git\laravel_windows01\app\Providers
MyServiceProvider.php
    public function register()
    {
        app()->singleton('myservice',
            'App\MyClasses\PowerMyService');
        app()->singleton('App\MyClasses\MyServiceInterface',
            'App\MyClasses\PowerMyService');
        echo "<b>＜MyServiceProvider/register＞</b><br>";
    }

C:\xampp\htdocs\lara01_git\laravel_windows01\app\Providers\AppServiceProvider.php


    public function boot()
    {
        //

        app()->singleton('myservice',
            'App\MyClasses\PowerMyService');

    }


php artisan make:middleware MyMiddleware


C:\xampp\htdocs\lara01_git\laravel_windows01\app\Http\Middleware
MyMiddleware.php
class MyMiddleware
{


    public function handle($request, Closure $next)
    {
        $id = rand(0, count(MyService::alldata()));
        MyService::setId($id);
        $merge_data = [
            'id'=>$id,
            'msg'=>MyService::say(), 
            'alldata'=>MyService::alldata()
        ];
        $request->merge($merge_data);


        return $next($request);
    }


}


C:\xampp\htdocs\lara01_git\laravel_windows01\app\Http\Controllers\HelloController.php

<?php

namespace App\Http\Controllers;
use Illuminate\Http\Request;

class HelloController extends Controller
{


    public function index(Request $request)
    {
        $data = [
            'msg'=> $request->msg,
            'data'=> $request->alldata,
        ];
        return view('hello.index', $data);
    }
    
}

C:\xampp\htdocs\lara01_git\laravel_windows01\app\Http
Kernel.php

        'MyMW' => [
            \App\Http\Middleware\HelloMiddleware::class,
            \App\Http\Middleware\MyMiddleware::class,
        ],

C:\xampp\htdocs\lara01_git\laravel_windows01\routes\web.php
Route::get('hello/{id}', [HelloController::class, 'index'])->middleware('MyMW');
Route::get('hello', [HelloController::class, 'index'])->middleware('MyMW');

C:\xampp\htdocs\lara01_git\laravel_windows01\app\Http\Controllers\HelloController.php

<?php

namespace App\Http\Controllers;
use Illuminate\Http\Request;

class HelloController extends Controller
{


    public function index(Request $request)
    {
        $data = [
            'msg'=> $request->hello,
            'data'=> $request->alldata,
        ];
        return view('hello.index', $data);
    }

}


C:\xampp\htdocs\lara01_git\laravel_windows01\resources\views\hello
index.blade.php
<body>
    <h1>Hello/Index</h1>
    <p>{{$msg}}</p>
    <ol>
    @foreach($data as $item)
    <li>{{$item->name}} [{{$item->mail}}, 
        {{$item->age}}]</li>
    @endforeach
    </ol>
    <hr>
</body>

C:\xampp\htdocs\lara01_git\laravel_windows01\app\Http\Controllers\HelloController.php

<?php

namespace App\Http\Controllers;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\DB;

class HelloController extends Controller
{


    public function index()
    {
        $result = DB::table('people')->get();
        $data = [
            'msg' => 'Database access.',
            'data' => $result,
        ];
        return view('hello.index', $data);
    }

}

C:\xampp\htdocs\lara01_git\laravel_windows01\routes\web.php
Route::get('hello', [HelloController::class, 'index']);
Route::get('hello/{id}', [HelloController::class, 'index']);

C:\xampp\htdocs\lara01_git\laravel_windows01\app\Http\Controllers\HelloController.php

    public function index($id = -1)
    {
        if ($id >= 0)
        {
            $msg = 'get ID <= ' . $id;
            $result = DB::table('people')
                ->where('id','<=', $id)->get();
        }
        else
        {
            $msg = 'get people records.';
            $result = DB::table('people')->get();
        }
        $data = [
            'msg' => $msg,
            'data' => $result,
        ];
        return view('hello.index', $data);
    }

    public function index($id = -1)
    {
        if ($id >= 0)
        {
            $msg = 'get name like "' . $id . '".';
            $result = DB::table('people')
                ->where('name','like', '%' . $id . '%')->get();
        }
        else
        {
            $msg = 'get people records.';
            $result = DB::table('people')->get();
        }
        $data = [
            'msg' => $msg,
            'data' => $result,
        ];
        return view('hello.index', $data);
    }

    public function index()
    {
        $msg = 'get people records.';
        $first = DB::table('people')->first();
        $last = DB::table('people')->orderBy('id','desc')->first();
        $result = [$first, $last];


        $data = [
            'msg' => $msg,
            'data' => $result,
        ];
        return view('hello.index', $data);
    }

    public function index($id = -1)
    {
        if ($id >= 0)
        {
            $msg = 'get name like "' . $id . '".';
            $result = [DB::table('people')->find($id)];
        }
        else
        {
            $msg = 'get people records.';
            $result = DB::table('people')->get();
        }
        $data = [
            'msg' => $msg,
            'data' => $result,
        ];
        return view('hello.index', $data);
    }

    public function index()
    {
        $name = DB::table('people')->pluck('name');
        $value = $name->toArray();
        $msg = implode(', ', $value); 
        $result = DB::table('people')->get();


        $data = [
            'msg' => $msg,
            'data' => $result,
        ];
        return view('hello.index', $data);
    }

    public function index()
    {
        $data = ['msg' => '', 'data' => []];
        $msg = 'get: ';
        $result = [];
        DB::table('people')
            ->chunkById(2, function($items) use (&$msg, &$result)
        {
            foreach($items as $item)
            {   
                $msg .= $item->id . ' ';
                $result += array_merge($result, [$item]);
                break;
            }
            return true;
        });
        $data = [
            'msg' => $msg,
            'data' => $result,
        ];
        return view('hello.index', $data);
    }


    public function index()
    {
        $data = ['msg' => '', 'data' => []];
        $msg = 'get: ';
        $result = [];
        DB::table('people')->orderBy('age', 'asc')
            ->chunk(2, function($items) use (&$msg, &$result)
        {
            foreach($items as $item)
            {   
                $msg .= $item->id . ':' . $item->name . ' ';
                $result += array_merge($result, [$item]);
                break;
            }
            return true;
        });
        $data = [
            'msg' => $msg,
            'data' => $result,
        ];
        return view('hello.index', $data);
    }

    public function index($id)
    {
        $data = ['msg' => '', 'data' => []];
        $msg = 'get: ';
        $result = [];
        $count = 0;
        DB::table('people')
            ->chunkById(3, function($items) 
                use (&$msg, &$result, &$id, &$count)
        {
            if ($count == $id)
            {
                foreach($items as $item)
                {   
                    $msg .= $item->id . ':' . $item->name . ' ';
                    $result += array_merge($result, [$item]);
                }
                return false;
            }
            $count++;
            return true;
        });
        $data = [
            'msg' => $msg,
            'data' => $result,
        ];
        return view('hello.index', $data);
    }

    public function index($id)
    {
        $ids = explode(',', $id);
        $msg = 'get people.';
        $result = DB::table('people')
            ->whereBetween('id', $ids)
            ->get();


        $data = [
            'msg' => $msg,
            'data' => $result,
        ];
        return view('hello.index', $data);
    }

    public function index($id)
    {
        $ids = explode(',', $id);
        $msg = 'get people.';
        $result = DB::table('people')
            ->whereIn('id' ,$ids)
            ->get();


        $data = [
            'msg' => $msg,
            'data' => $result,
        ];
        return view('hello.index', $data);
    }


        $result = DB::table('people')
            ->orwhereNotNull('id' ,$ids)
            ->get();

    public function index($id)
    {
        $msg = 'show page: ' . $id;
        $result = DB::table('people')
            ->paginate(3, ['*'], 'page', $id);


        $data = [
            'msg' => $msg,
            'data' => $result,
        ];
        return view('hello.index', $data);
    }


    public function index(Request $request)
    {
        $id = $request->query('page');
        $msg = 'show page: ' . $id;
        $result = DB::table('people')
            ->paginate(3, ['*'], 'page', $id);


        $data = [
            'msg' => $msg,
            'data' => $result,
        ];
        return view('hello.index', $data);
    }

C:\xampp\htdocs\lara01_git\laravel_windows01\bootstrap
app.php
Illuminate\Pagination\AbstractPaginator::defaultView("pagination::bootstrap-4");

C:\xampp\htdocs\lara01_git\laravel_windows01\resources\views\hello
index.blade.php
<!DOCTYPE html>
<html lang="ja">
    <head>
        <meta charset="utf-8">
        <title>Index</title>
        <link href="/css/app.css"  rel="stylesheet">
    </head>
    <body>
        <h1>Hello/Index</h1>
        <p>{{$msg}}</p>
        <ol>
        @foreach($data as $item)
        <li>{{$item->name}} [{{$item->mail}}, 
            {{$item->age}}]</li>
        @endforeach
        </ol>
        <hr>
        {!! $data->links() !!}
    </body>

</html>

composer require laravel/ui
php artisan ui bootstrap
npm install
php artisan ui bootstrap --auth
npm run dev

https://qiita.com/n-oota/items/25601d0ab268461e66ac
Laravel5.5 Bootstrap4のSassを使ってみる


C:\xampp\htdocs\lara01_git\laravel_windows01\app\Http\Controllers\HelloController.php

    public function index(Request $request)
    {
        $id = $request->query('page');
        $msg = 'show page: ' . $id;
        $result = DB::table('people')->simplePaginate(3);

        $data = [
            'msg' => $msg,
            'data' => $result,
        ];
        return view('hello.index', $data);
    }


use App\Person;
    public function index(Request $request)
    {
        $id = $request->query('page');
        $msg = 'show page: ' . $id;
        $result = Person::paginate(3);

        $data = [
            'msg' => $msg,
            'data' => $result,
        ];
        return view('hello.index', $data);
    }

C:\xampp\htdocs\lara01_git\laravel_windows01\app\Http\Pagenation

<?php
namespace App\Http\Pagination;


use Illuminate\Contracts\Pagination\Paginator;
MyPagenator.php

class MyPaginator
{
    private $paginator;


    public function __construct(Paginator $paginator)
    {
        $this->paginator = $paginator;
    }


    public function link()
    {
        $prev = $this->paginator->currentPage() == 1 ?
            ' disabled' : '';
        $next = $this->paginator->currentPage() == 
            $this->paginator->count() ? ' disabled' : '';
        $result = '<ul class="pagination" role="navigation">';
        $result .= '<li class="page-item' . $prev . 
            '"><a class="page-link" href="' . 
            $this->paginator->previousPageUrl() . 
            '">←前のページ</a></li>';
        $result .= '<li class="page-item disabled">' .
            '<a class="page-link">'. 
            $this->paginator->currentPage() . '</a></li>';
        $result .= '<li class="page-item' . $next . 
            '"><a class="page-link" href="' . 
            $this->paginator->nextPageUrl() . 
            '">次のページ→</a></li>';
        $result .= '</ul>';
        return $result;
    }
}

C:\xampp\htdocs\lara01_git\laravel_windows01\app\Http\Controllers\HelloController.php

use App\Person;
use App\Http\Pagination\MyPaginator;

    public function index(Request $request)
    {
        $id = $request->query('page');
        $msg = 'show page: ' . $id;
        $result = Person::paginate(3);
        $paginator = new MyPaginator($result);
        $data = [
            'msg' => $msg,
            'data' => $result,
            'paginator' => $paginator,
        ];
        return view('hello.index', $data);
    }

C:\xampp\htdocs\lara01_git\laravel_windows01\resources\views\hello
index.blade.php
{!! $paginator->link() !!}


C:\xampp\htdocs\lara01_git\laravel_windows01\app\Http\Controllers\HelloController.php
    public function index(Request $request)
    {
        $msg = 'show people record.';
        $result = Person::get();
        $data = [
            'msg' => $msg,
            'data' => $result,
        ];
        return view('hello.index', $data);
    }

use App\Models\Person;
use App\Person;

C:\xampp\htdocs\lara01_git\laravel_windows01\resources\views\hello
index.blade.php

    <body>
        <h1>Hello/Index</h1>
        <p>{{$msg}}</p>
        <table class="table table-striped">
        @foreach($data as $item)
        <tr>
            <th>{{$item->id}}</th>
            <td>{{$item->name}}</td>
            <td>{{$item->mail}}</td> 
            <td>{{$item->age}}</td>
        </tr>
        @endforeach
        </table>
        <hr>
    </body>

C:\xampp\htdocs\lara01_git\laravel_windows01\app\Http\Controllers\HelloController.php

        $result = Person::get()->reject(function($person)
        {
            return $person->age < 30;
        });

C:\xampp\htdocs\lara01_git\laravel_windows01\resources\views\hello
index.blade.php

    <body>
        <h1>Hello/Index</h1>
        <p>{{$msg}}</p>
        <table class="table table-striped" border="0" style="border-collapse: collapse;">
        @foreach($data as $item)
        <tr>
            <th class="bg-primary table-dark" style="width: 10%">{{$item->id}}</th>
            <td style="width: 30%">{{$item->name}}</td>
            <td style="width: 30%">{{$item->mail}}</td> 
            <td style="width: 30%">{{$item->age}}</td>
        </tr>
        @endforeach
        </table>
        <hr>
    </body>

C:\xampp\htdocs\lara01_git\laravel_windows01\app\Http\Controllers\HelloController.php

    public function index(Request $request)
    {
        $msg = 'show people record.';
        $keys = Person::get()->modelKeys();
        $even = array_filter($keys, function($key)
            {
                return $key % 2 == 0;
            });
        $result = Person::get()->only($even);
        
        $data = [
            'msg' => $msg,
            'data' => $result,
        ];
        return view('hello.index', $data);
    }

    public function index(Request $request)
    {
        $msg = 'show people record.';
        $even = Person::get()->filter(function($item)
        {
            return $item->id % 2 == 0;
        });
        $even2 = Person::get()->filter(function($item)
        {
            return $item->age % 2 == 0;
        });
        $result = $even->merge($even2);
        
        $data = [
            'msg' => $msg,
            'data' => $result,
        ];
        return view('hello.index', $data);
    }

    public function index(Request $request)
    {
        $msg = 'show people record.';
        $even = Person::get()->filter(function($item)
            {
                return $item->id % 2 == 0;
            });
        $map = $even->map(function($item, $key)
            {
                return $item->id . ':' . $item->name;
            });
        
        $data = [
            'msg' => $map,
            'data' => $even,
        ];
        return view('hello.index', $data);
    }



<?php
namespace App;

use Illuminate\Database\Eloquent\Model; 
use Illuminate\Database\Eloquent\Collection;

class Person extends Model
{
    public function newCollection(array $models = [])
    {
        return new MyCollection($models);
    }
}

C:\xampp\htdocs\lara01_git\laravel_windows01\app
Person.php
class MyCollection extends Collection
{
    public function fields()
    {
        $item = $this->first();
        return array_keys($item->toArray());
    }
}

C:\xampp\htdocs\lara01_git\laravel_windows01\app\Http\Controllers\HelloController.php

    public function index(Request $request)
    {
        $msg = 'show people record.';
        $re = Person::get();
        $fields = Person::get()->fields();
        
        $data = [
            'msg' => implode(', ', $fields),
            'data' => $re,
        ];
        return view('hello.index', $data);
    }

C:\xampp\htdocs\lara01_git\laravel_windows01\app
Person.php
class Person extends Model
{
    public function newCollection(array $models = [])
    {
        return new MyCollection($models);
    }

    public function getNameAndIdAttribute()
	{
	    return $this->name . ' [id=' . $this->id . ']';
	}


	public function getNameAndMailAttribute()
	{
	    return $this->name . ' (' . $this->mail . ')';
	}


	public function getNameAndAgeAttribute()
	{
	    return $this->name . '(' . $this->age . ')';
	}
	public function getAllDataAttribute()
	{
	    return $this->name . '(' . $this->age . ')'
	        . ' [' . $this->mail . ']';
	}
}

C:\xampp\htdocs\lara01_git\laravel_windows01\resources\views\hello
index.blade.php


    <body>
        <div class="container pt-3">
            <h1>Hello/Index</h1>
            <p>{{$msg}}</p>
            <table class="table table-striped" border="0" style="border-collapse: collapse;">
            @foreach($data as $item)
            <tr>
                <th class="bg-primary table-dark" style="width: 10%">{{$item->id}}</th>
                <td style="width: 90%">{{$item->name_and_age}}</td>
            </tr>
            @endforeach
            </table>
        </div>
    </body>

C:\xampp\htdocs\lara01_git\laravel_windows01\app
Person.php
	public function getNameAttribute($value)
	{
	    return strtoupper($value);
	}

	public function setNameAttribute($value)
	{
	    $this->attributes['name'] = strtoupper($value);
	}


	protected $guarded = ['id'];

	public static $rules = [
	    'name' => 'required',
	    'mail' => 'email',
	    'age' => 'integer',
	];



    public function save($id, $name)
    {
        $record = Person::find($id);
        $record->name = $name;
        $record->save();
        return redirect()->route('hello');
    }

MYSQLにupdated_atカラム追加
ALTER TABLE people ADD updated_at varchar(255)
ALTER TABLE people ADD created_at varchar(255)

C:\xampp\htdocs\lara01_git\laravel_windows01\routes\web.php
Route::get('hello', [HelloController::class, 'index'])->name('hello');
Route::get('hello/{id}', [HelloController::class, 'index']);
Route::get('hello/{id}/{name}', [HelloController::class, 'save']);

C:\xampp\htdocs\lara01_git\laravel_windows01\app
Person.php
	public function setAllDataAttribute(Array $value)
	{
	    $this->attributes['name'] = $value[0];
	    $this->attributes['mail'] = $value[1];
	    $this->attributes['age'] = $value[2];
	}

C:\xampp\htdocs\lara01_git\laravel_windows01\app\Http\Controllers\HelloController.php

	public function other()
	{
	    
	    $person = new Person();
	    $person->all_data = ['aaa','bbb@ccc', 1234]; // ダミーデータ
	    $person->save();
	    
	    return redirect()->route('hello');
	}


C:\xampp\htdocs\lara01_git\laravel_windows01\routes\web.php
Route::get('hello', [HelloController::class, 'index'])->name('hello');
//Route::get('hello/{id}', [HelloController::class, 'index']);
Route::get('hello/{id}/{name}', [HelloController::class, 'save']);
Route::get('hello/other', [HelloController::class, 'other']);


Route::get('hello', [HelloController::class, 'index'])->name('hello');
//Route::get('hello/{id}', [HelloController::class, 'index']);
//Route::get('hello/{id}/{name}', [HelloController::class, 'save']);
Route::get('hello/other', [HelloController::class, 'other']);
Route::get('hello/json', [HelloController::class, 'json']);
Route::get('hello/json/{id}', [HelloController::class, 'json']);

C:\xampp\htdocs\lara01_git\laravel_windows01\app\Http\Controllers\HelloController.php

    public function json($id = -1)
    {
        if ($id == -1)
        {
            return Person::get()->toJson();
        }
        else
        {
            return Person::find($id)->toJson();
        }
    }

C:\xampp\htdocs\lara01_git\laravel_windows01\resources\views\hello
index.blade.php
<!doctype html>
<html lang="ja">
<head>
    <title>Index</title>
    <link href="/css/app.css"  rel="stylesheet">
    <script>
    function doAction(){
        var id = document.querySelector('#id').value;
        var xhr = new XMLHttpRequest();
        xhr.open('GET', '/hello/json/' + id, true);
        xhr.responseType = 'json';
        xhr.onload = function(e) {
            if (this.status == 200) {
                var result = this.response;
                document.querySelector('#name').textContent = result.name;
                document.querySelector('#mail').textContent = result.mail;
                document.querySelector('#age').textContent = result.age;
            }
        };
        xhr.send();
    }
    </script>
</head>
<body>
    <div class="pl-3 pt-3">
        <h1>Hello/Index</h1>
        <div>
            <input type="number" id="id" value="1">
            <button onclick="doAction();">Click</button>
        </div>
        <ul>
        <li id="name"></li>
        <li id="mail"></li>
        <li id="age"></li>
        </ul>
    </div>
</body>


composer require laravel/scout
//composer require algolia/algoliasearch-client-php:^2.2
composer require algolia/algoliasearch-client-php

php artisan vendor:publish --provider="Laravel\Scout\ScoutServiceProvider"

C:\xampp\htdocs\lara01_git\laravel_windows01\config
scout.php
    'algolia' => [
        'id' => env('ALGOLIA_APP_ID', 'AVSVHDZUJH'),
        'secret' => env('ALGOLIA_SECRET', 'c5c0f96ba4d9e6d8356534242eecf8df'),
    ],

php artisan scout:import "App\Person"
php artisan scout:flush "App\Person"

C:\xampp\htdocs\lara01_git\laravel_windows01\resources\views\hello
index.blade.php
<!doctype html>
<html lang="ja">
<head>
    <title>Index</title>
    <link href="/css/app.css"  rel="stylesheet">
</head>
<body>
    <div class="pl-3 pt-3">
        <h1>Hello/Index</h1>
        <p>{{$msg}}</p>
        <div>
        <form action="/hello" method="post">
            @csrf
            <input type="text" id="find" name="find" 
                value="{{$input}}">
            <input type="submit">
        </form>
        </div>
        <hr>
        <table class="table table-striped" style="width: 300px;">
        @foreach($data as $item)
        <tr>
            <th class="bg-primary table-dark" style="width: 10%">{{$item->id}}</th>
            <td>{{$item->all_data}}</td>
        </tr>
        @endforeach
        </table>
    </div>
</body>
</html>

composer require teamtnt/tntsearch
composer require teamtnt/laravel-scout-tntsearch-driver
composer update
composer remove teamtnt/tntsearch
composer require teamtnt/tntsearch:2.7.0
composer require teamtnt/laravel-scout-tntsearch-driver:


C:\xampp\htdocs\lara01_git\laravel_windows01\config
scout.php
    'driver' => env('SCOUT_DRIVER', 'tntsearch'),

    'tntsearch' => [
        'storage' => storage_path(),
    ],

C:\xampp\htdocs\lara01_git\laravel_windows01\app\Http\Controllers\HelloController.php

Person::get(['*'])->searchable();

C:\xampp\htdocs\lara01_git\laravel_windows01\app
Person.php
public function toSearchableArray()
{
    $array = $this->toArray();
    $array['reverse'] = strrev($array['name']);


    return $array;
}

php artisan make:job MyJob


C:\xampp\htdocs\lara01_git\laravel_windows01\app\Jobs
MyJob.php

    public function handle()
    {
        //
        echo '<p class="myjob">THIS IS MYJOB!</p>';
    }

php artisan make:provider MyJobProvider
MyJobProvider.php
C:\xampp\htdocs\lara01_git\laravel_windows01\app\Providers
    public function register()
    {
        //
        $this->app->bindMethod(MyJob::class.'@handle', 
                function($job, $app)
        {
            return $job->handle();
        });

    }

C:\xampp\htdocs\lara01_git\laravel_windows01\app\Http\Controllers\HelloController.php

use App\Jobs\MyJob;

    public function index()
    {
        Person::get(['*'])->searchable();
        MyJob::dispatch();
        $msg = 'show people record.';
        $result = Person::get();
        
        $data = [
            'input' => '',
            'msg' => $msg,
            'data' => $result,
        ];
        return view('hello.index', $data);
    }

C:\xampp\htdocs\lara01_git\laravel_windows01\resources\views\hello
index.blade.php
<!doctype html>
<html lang="ja">
<head>
    <title>Index</title>
    <link href="/css/app.css"  rel="stylesheet">
    <style type="text/css">
        .myjob{
            color: #ffffff;
            padding-left: 1rem;
            background-color: #666;
        }
    </style>
</head>
<body>
    <div class="pl-3 pt-3">
        <h1>Hello/Index</h1>
        <p>{{$msg}}</p>
        <div>
        <form action="/hello" method="post">
            @csrf
            <input type="text" id="find" name="find" 
                value="{{$input}}">
            <input type="submit">
        </form>
        </div>
        <hr>
        <table class="table table-striped" style="width: 300px;">
        <?php

            $json_search = "$data";
            $array_search = json_decode( $json_search,true ) ;
            sort($array_search);

            for($i = 0; $i < count($array_search); ++$i) {
                echo $array_search[$i]['id']." : ";
                echo $array_search[$i]['name']." : ";
                echo $array_search[$i]['mail']." : ";
                echo $array_search[$i]['age'];
                echo "<br>";
            }
            echo "<br>";
        ?>
        @foreach($data as $item)
        <tr>
            <th class="bg-primary table-dark" style="width: 10%">{{$item->id}}</th>
            <td>{{$item->all_data}}</td>
        </tr>
        @endforeach
        </table>
    </div>
</body>
</html>


C:\xampp\htdocs\lara01_git\laravel_windows01\app\Jobs
MyJob.php
<?php

namespace App\Jobs;

use Illuminate\Bus\Queueable;
use Illuminate\Contracts\Queue\ShouldBeUnique;
use Illuminate\Contracts\Queue\ShouldQueue;
use Illuminate\Foundation\Bus\Dispatchable;
use Illuminate\Queue\InteractsWithQueue;
use Illuminate\Queue\SerializesModels;
use App\Person;

class MyJob implements ShouldQueue
{
    use Dispatchable, InteractsWithQueue, Queueable, SerializesModels;

    protected $person;

    /**
     * Create a new job instance.
     *
     * @return void
     */
    public function __construct(Person $person)
    {
        $this->person = $person;
    }

    /**
     * Execute the job.
     *
     * @return void
     */
    public function handle()
    {
        //
        //echo '<p class="myjob">THIS IS MYJOB!</p>';
        $sufix = ' [+MYJOB]';
        if (strpos($this->person->name, $sufix))
        {
            $this->person->name = str_replace( $sufix, '', $this->person->name);
        } else {
            $this->person->name .= $sufix;
        }
        $this->person->save();

    }
}

C:\xampp\htdocs\lara01_git\laravel_windows01\app\Http\Controllers\HelloController.php

    public function index(Person $person = null)
    {
        if ($person != null)
        {
            MyJob::dispatch($person);
        }
        $msg = 'show people record.';
        $result = Person::get();
        $data = [
            'input' => '',
            'msg' => $msg,
            'data' => $result,
        ];
        return view('hello.index', $data);
    }


C:\xampp\htdocs\lara01_git\laravel_windows01\routes\web.php
Route::get('/hello', [HelloController::class, 'index']);
Route::post('/hello', [HelloController::class, 'send']);
Route::get('/hello/{person}', [HelloController::class, 'index']);

php artisan queue:table
php artisan migrate

C:\xampp\htdocs\lara01_git\laravel_windows01
.env
QUEUE_CONNECTION=database
QUEUE_DRIVER=database

php artisan queue:work

C:\xampp\htdocs\lara01_git\laravel_windows01\app\Http\Controllers\HelloController.php

MyJob::dispatch($person)->delay(now()->addMinutes(5));


C:\xampp\htdocs\lara01_git\laravel_windows01\app\Http\Controllers\HelloController.php

    public function index(Person $person = null)
    {
        if ($person != null)
        {
            $qname = $person->id % 2 == 0 ? 'even' : 'odd';
            MyJob::dispatch($person)->onQueue($qname);
        }
        $msg = 'show people record.';
        $result = Person::get();
        $data = [
            'input' => '',
            'msg' => $msg,
            'data' => $result,
        ];
        return view('hello.index', $data);
    }


php artisan queue:work --stop-when-empty --queue=odd
php artisan queue:work --stop-when-empty --queue=even


C:\xampp\htdocs\lara01_git\laravel_windows01\app\Http\Controllers\HelloController.php

use Illuminate\Support\Facades\Storage;

public function index()
{
    $msg = 'show people record.';
    $result = Person::get();
    $data = [
        'input' => '',
        'msg' => $msg,
        'data' => $result,
    ];
    return view('hello.index', $data);
}
    
public function send(Request $request)
{
    $id = $request->input('id');
    $person = Person::find($id);
    
    dispatch(function() use ($person)
    {
        Storage::append('person_access_log.txt', 
            $person->all_data);
    });
    return redirect()->route('hello');
}

C:\xampp\htdocs\lara01_git\laravel_windows01\resources\views\hello
index.blade.php
        <form action="/hello" method="post">
            @csrf
            ID: <input type="text" id="id" name="id">
            <input type="submit">
        </form>


php artisan queue:work --stop-when-empty

C:\xampp\htdocs\lara01_git\laravel_windows01\app\Providers
EventServiceProvider.php
    protected $listen = [
        Registered::class => [
            SendEmailVerificationNotification::class,
        ],
        'App\Events\PersonEvent' => [
            'App\Listeners\PersonEventListener',
        ],
    ];

php artisan event:generate


C:\xampp\htdocs\lara01_git\laravel_windows01\app\Events
PersonEvent.php
<?php
namespace App\Events;


use Illuminate\Queue\SerializesModels;


class PersonEvent
{
    use SerializesModels;


    public $person;


    public function __construct(Person $person)
    {
        $this->person = $person;
    }


}

C:\xampp\htdocs\lara01_git\laravel_windows01\app\Listeners
PersonEventListener.php
use App\Person;
use Illuminate\Support\Facades\Storage;
    public function handle(PersonEvent $event)
    {
        //
        Storage::append('person_access_log.txt', 
            '[PersonEvent] ' . now() . ' ' . 
            $event->person->all_data);
    }

C:\xampp\htdocs\lara01_git\laravel_windows01\app\Http\Controllers\HelloController.php

use App\Events\PersonEvent;

    public function send(Request $request)
    {
        $id = $request->input('id');
        $person = Person::find($id);
        
        event(new PersonEvent($person));


        $data = [
            'input' => '',
            'msg' => 'id='. $id,
            'data' => [$person],
        ];
        return view('hello.index', $data);
    }

C:\xampp\htdocs\lara01_git\laravel_windows01\app\Providers
EventServiceProvider.php
    protected $listen = [
        Registered::class => [
            SendEmailVerificationNotification::class,
        ],
    ];

    protected $subscribe = [
        'App\Listeners\MyEventSubscriber',
    ];


    public function shouldDiscoverEvents()
    {
        return true;
    }


C:\xampp\htdocs\lara01_git\laravel_windows01\app\Listeners
PersonEventListener.php
use Illuminate\Contracts\Queue\ShouldQueue;
↑はすでに記述があった。
class PersonEventListener implements ShouldQueue

php artisan queue:work --stop-when-empty

C:\xampp\htdocs\lara01_git\laravel_windows01
mycmd.bat
echo [%date% %time%] This is MyCmd.bat. >> mycmd_log.txt


C:\xampp\htdocs\lara01_git\laravel_windows01\app\Console
Kernel.php
    protected function schedule(Schedule $schedule)
    {
        // $schedule->command('inspire')->hourly();
        $schedule->exec('mycmd');
    }

php artisan schedule:run

C:\xampp\htdocs\lara01_git\laravel_windows01\app\Console
Kernel.php
    protected function schedule(Schedule $schedule)
    {
        // $schedule->command('inspire')->hourly();
        $schedule->command('queue:work --stop-when-empty');
    }

use App\Person;
use App\Jobs\MyJob;

    protected function schedule(Schedule $schedule)
    {
        // $schedule->command('inspire')->hourly();
        $count = Person::all()->count();
        $id = rand(0, $count) + 1;
        $schedule->call(function() use ($id)
        {
            $person = Person::find($id);
            MyJob::dispatch($person);
        });
    }


php artisan schedule:run
php artisan queue:work --stop-when-empty


C:\xampp\htdocs\lara01_git\laravel_windows01\app\Console
Kernel.php
<?php

namespace App\Console;

use Illuminate\Console\Scheduling\Schedule;
use Illuminate\Foundation\Console\Kernel as ConsoleKernel;

use App\Person;
use App\Jobs\MyJob;
use Illuminate\Support\Facades\Storage;

class Kernel extends ConsoleKernel
{
    /**
     * The Artisan commands provided by your application.
     *
     * @var array
     */
    protected $commands = [
        //
    ];

    /**
     * Define the application's command schedule.
     *
     * @param  \Illuminate\Console\Scheduling\Schedule  $schedule
     * @return void
     */
    protected function schedule(Schedule $schedule)
    {
        $count = Person::all()->count();
        $id = rand(0, $count) + 1;
        $obj = new ScheduleObj($id);
        $schedule->call($obj);
    }

    /**
     * Register the commands for the application.
     *
     * @return void
     */
    protected function commands()
    {
        $this->load(__DIR__.'/Commands');

        require base_path('routes/console.php');
    }
}


class ScheduleObj
{
    private $person;


    public function __construct($id)
    {
        $this->person = Person::find($id);
    }


    public function __invoke()
    {
        Storage::append('person_access_log.txt', 
            $this->person->all_data);
        MyJob::dispatch($this->person);
        return 'true';
    }
}

C:\xampp\htdocs\lara01_git\laravel_windows01\app\Jobs
MyJob.php
<?php

namespace App\Jobs;

use Illuminate\Bus\Queueable;
use Illuminate\Contracts\Queue\ShouldBeUnique;
use Illuminate\Contracts\Queue\ShouldQueue;
use Illuminate\Foundation\Bus\Dispatchable;
use Illuminate\Queue\InteractsWithQueue;
use Illuminate\Queue\SerializesModels;
use App\Person;
use Illuminate\Support\Facades\Storage;

class MyJob implements ShouldQueue
{
    use Dispatchable, InteractsWithQueue, Queueable, SerializesModels;


    protected $person;


    public function getPersonId()
    {
        return $this->person->id;
    }
    
    public function __construct($id)
    {
        $this->person = Person::find($id)->first();
    }


    public function __invoke()
    {
        $this->handle();
    }


    public function handle()
    {
        $this->doJob();
    }
    
    public function doJob()
    {
        $sufix = ' [+MYJOB]';
        if (strpos($this->person->name, $sufix))
        {
            $this->person->name = str_replace( $sufix, '', $this->person->name);
        } else {
            $this->person->name .= $sufix;
        }
        $this->person->save();


        Storage::append('person_access_log.txt', 
            $this->person->all_data);
    }
}



    protected function schedule(Schedule $schedule)
    {
        $count = Person::all()->count();
        $id = rand(0, $count) + 1;


        /* インスタンス実行 */
        $schedule->call(new MyJob($id));
        
        /* ディスパッチする*/
        $schedule->call(function() use($id)
        {
            MyJob::dispatch($id);
        }); 
    }

    protected function schedule(Schedule $schedule)
    {
        $count = Person::all()->count();
        $id = rand(0, $count) + 1;
        $schedule->job(new MyJob($id));
    }

php artisan schedule:run
php artisan queue:work --stop-when-empty

npm install
npm run dev

C:\xampp\htdocs\lara01_git\laravel_windows01\resources\views\hello
index.blade.php
<!doctype html>
<html lang="ja">
<head>
    <title>Index</title>
    <link href="{{ mix('css/app.css') }}" 
        rel="stylesheet" type="text/css">
    <meta name="csrf-token" content="{{ csrf_token() }}">
</head>
<body style="padding:10px;">
    <h1>Hello/Index</h1>
    <p>{{$msg}}</p>


    <div id="app">
        <example-component></example-component>
    </div>
    <script src="{{ mix('js/app.js') }}"></script>


</body>

</html>

C:\xampp\htdocs\lara01_git\laravel_windows01
package.json
    "devDependencies": {
        "axios": "^0.21",
        "bootstrap": "^4.6.0",
        "jquery": "^3.6",
        "laravel-mix": "^6.0.6",
        "lodash": "^4.17.19",
        "popper.js": "^1.16.1",
        "postcss": "^8.1.14",
        "resolve-url-loader": "^4.0.0",
        "sass": "^1.32.11",
        "sass-loader": "^11.0.1"
    }

npm uninstall vue
npm uninstall vue-loader
npm uninstall vue-template-compiler

php artisan ui vue --auth
php artisan ui vue
npm install
npm run dev

https://mebee.info/2019/11/14/post-3986/
Laravel6でvue.jsを利用する(Laravel Framework 8.49.1で読み替え)

npm run dev
php artisan -V
Laravel Framework 8.49.1

C:\xampp\htdocs\lara01_git\laravel_windows01\resources\js\components
ExampleComponent.vue
<template>
    <div class="container">
        <div class="row justify-content-center">
            <div class="col-md-8">
                <div class="card">
                    <div class="card-header">Example Component</div>

                    <div class="card-body">
                        I'm an example component.@@@
                    </div>
                </div>
            </div>
        </div>
    </div>
</template>

<script>
    export default {
        mounted() {
            console.log('Component mounted.')
        }
    }
</script>


C:\xampp\htdocs\lara01_git\laravel_windows01\resources\views\hello
index.blade.php
<!doctype html>
<html lang="ja">
<head>
    <title>Index</title>
    <link href="{{ mix('css/app.css') }}" 
        rel="stylesheet" type="text/css">
    <meta name="csrf-token" content="{{ csrf_token() }}">
</head>
<body style="padding:10px;">
    <h1>Hello/Index</h1>
    <p>{{$msg}}</p>


    <div id="app">
        <example-component></example-component>
    </div>
    <script src="{{ mix('js/app.js') }}"></script>


</body>


</html>

C:\xampp\htdocs\lara01_git\laravel_windows01\app\Http\Controllers\HelloController.php

    public function index()
    {
        $data = [
            'msg' => 'This is Vue.js application.',
        ];
        return view('hello.index', $data);
    }


<template>
    <div class="container">
        <p>{{msg}}</p>
        <hr>
        <input type="text" v-model="name">
        <button v-on:click="doAction">click</button>
    </div>
</template>

C:\xampp\htdocs\lara01_git\laravel_windows01\resources\js\components
MyComponent.vue
<script>
export default {
    data:function(){
        return {
            msg:'please your name:',
            name:'',
        };
    },
    methods:{
        doAction:function(){
            this.msg = 'Hello, ' + this.name + '!!';
        }
    }
}
</script>

C:\xampp\htdocs\lara01_git\laravel_windows01\resources\js
app.js
Vue.component('my-component', require('./components/MyComponent.vue').default);

C:\xampp\htdocs\lara01_git\laravel_windows01\resources\views\hello
index.blade.php

    <div id="app">
        <example-component></example-component>
        <my-component></my-component>
    </div>

npm run dev


C:\xampp\htdocs\lara01_git\laravel_windows01\app\Http\Controllers\HelloController.php

    public function json($id = -1)
    {
        if ($id == -1)
        {
            return Person::get()->toJson();
        }
        else
        {
            return Person::find($id)->toJson();
        }
    }

C:\xampp\htdocs\lara01_git\laravel_windows01\routes\web.php
Route::get('/hello', [HelloController::class, 'index']);
Route::post('/hello', [HelloController::class, 'send']);

Route::get('/hello/json', [HelloController::class, 'json']);
Route::get('/hello/json/{id}', [HelloController::class, 'json']);

npm run dev

C:\xampp\htdocs\lara01_git\laravel_windows01\resources\js\components
MyComponent.vue
<template>
    <div class="container">
        <p>{{msg}}</p>
        <hr>
        <ul>
            <li v-for="(person,key) in people">
                {{person.id}}: {{person.name}} [{{person.mail}}] ({{person.age}})
            </li>
        </ul>
    </div>
</template>


<script>
const axios = require('axios');
export default {
    mounted () {
        axios.get('/hello/json')
            .then(response =>{
                this.people = response.data;
                this.msg = 'get data!';
            });
    },
    data:function(){
        return {
            msg:'wait...',
            name:'',
            people:[],
        };
    },
    methods:{
        doAction:function(){
            this.msg = 'Hello, ' + this.name + '!!';
        }
    },
}
</script>


php artisan preset react // 代わりに
https://shiro-changelife.com/command-preset-is-not-defined/
【解決済み】 Command “preset” is not defined.のエラーを解消する方法

php artisan ui react
npm install
npm run dev

C:\xampp\htdocs\lara01_git\laravel_windows01\app\Http\Controllers\HelloController.php

    public function index()
    {
        $data = [
            'msg' => 'This is React application.',
        ];
        return view('hello.index', $data);
    }

C:\xampp\htdocs\lara01_git\laravel_windows01
package.json

    "devDependencies": {
        "@babel/preset-react": "^7.13.13",
        "axios": "^0.21",
        "bootstrap": "^4.6.0",
        "jquery": "^3.6",
        "laravel-mix": "^6.0.6",
        "lodash": "^4.17.19",
        "popper.js": "^1.16.1",
        "postcss": "^8.1.14",
        "react": "^17.0.2",
        "react-dom": "^17.0.2",
        "resolve-url-loader": "^3.1.2",
        "sass": "^1.32.11",
        "sass-loader": "^11.0.1",
        "vue-loader": "^15.9.7"
    },


C:\xampp\htdocs\lara01_git\laravel_windows01\resources\views\hello
index.blade.php
<!doctype html>
<html lang="ja">
<head>
    <title>Index</title>
    <link href="{{ mix('css/app.css') }}" 
        rel="stylesheet" type="text/css">
    <meta name="csrf-token" content="{{ csrf_token() }}">
</head>
<body style="padding:10px;">
    <h1>Hello/Index</h1>
    <p>{{$msg}}</p>


    <div id="example"></div>
    
    <script src="{{asset('/js/app.js')}}"></script>
</body>


</html>

C:\xampp\htdocs\lara01_git\laravel_windows01\resources\js\components
MyComponent.js

import React, { Component } from 'react';
import ReactDOM from 'react-dom';


export default class MyComponent extends Component {


    constructor(props) {
        super(props);
        this.state = {
            num:0,
            msg:'ok',
        };
        this.doChange = this.doChange.bind(this);
    }


    doChange(event) {
        let n = event.target.value;
        this.setState((state)=>({
            num: n,
            msg: 'count: ' + n,
        }));
    }


    render() {
        return (
            <div className="container">
                <p>{this.state.msg}</p>
                <div>
                    <input type="number" id="num"
                        onChange={this.doChange} />
                </div>
            </div>
        );
    }
}


if (document.getElementById('mycomponent')) {
    ReactDOM.render(<MyComponent />, document.getElementById('mycomponent'));
}


C:\xampp\htdocs\lara01_git\laravel_windows01\resources\js
app.js
require('./components/Example');
require('./components/MyComponent');


C:\xampp\htdocs\lara01_git\laravel_windows01\resources\views\hello
index.blade.php
    <div id="example"></div>
    <div id="mycomponent" style="padding-top: 10px;"></div>

npm run dev

C:\xampp\htdocs\lara01_git\laravel_windows01\resources\js\components
MyComponent.js

import React, { Component } from 'react';
import ReactDOM from 'react-dom';


export default class MyComponent extends Component {


    constructor(props) {
        super(props);
        this.state = {
            num:0,
            msg:'ok',
        };
        this.doChange = this.doChange.bind(this);
        this.doAction = this.doAction.bind(this);
    }


    doChange(event) {
        let n = event.target.value;
        this.setState((state)=>({
            num: n,
            person:null,
        }));
    }
    doAction(event) {
        this.setState((state)=>({
            msg:'wait...',
        }));
        axios.get('/hello/json/' + this.state.num)
            .then(response =>{
                let person = response.data;
                let msg = person.id + ':' + person.name
                    + ' [' + person.mail + '] ('
                    + person.age + ')';
                this.setState((state)=>({
                    person:person,
                    msg:msg
                }));
            });


    }


    render() {
        return (
            <div className="container">
                <p>{this.state.msg}</p>
                <div>
                    <input type="number" id="num"
                        onChange={this.doChange} />
                    <button onClick={this.doAction}>Click</button>
                </div>
            </div>
        );
    }
}


if (document.getElementById('mycomponent')) {
    ReactDOM.render(<MyComponent />, document.getElementById('mycomponent'));
}

npm run dev

npm install -g @angular/cli
cd C:\xampp\htdocs\lara01_git\laravel_windows01\resources
ng new ngapp
cd C:\xampp\htdocs\lara01_git\laravel_windows01\resources\ngapp
ng build


C:\xampp\htdocs\lara01_git\laravel_windows01
webpack.mix.js
mix.js([
   'resources/ngapp/dist/ngapp/runtime.js',
   'resources/ngapp/dist/ngapp/vendor.js',
   'resources/ngapp/dist/ngapp/styles.js',
   'resources/ngapp/dist/ngapp/polyfills.js',
   'resources/ngapp/dist/ngapp/main.js'
 ], 'public/js/app.js');


mix.sass(
   'resources/sass/app.scss', 
   'public/css/app.css'
);


cd C:\xampp\htdocs\lara01_git\laravel_windows01
npm install
npm run dev

C:\xampp\htdocs\lara01_git\laravel_windows01
webpack.mix.js
mix.js([
   'resources/ngapp/dist/ngapp/runtime.bbfb57b8daa2fca80e25.js',
   //'resources/ngapp/dist/ngapp/vendor.js',
   'resources/ngapp/dist/ngapp/styles.31d6cfe0d16ae931b73c.css',
   'resources/ngapp/dist/ngapp/polyfills.9cecb7ad41f1b7dfcce5.js',
   'resources/ngapp/dist/ngapp/main.89881a79dd5b779099e1.js'
 ], 'public/js/app.js');


C:\xampp\htdocs\lara01_git\laravel_windows01\resources\views\hello
index.blade.php
<!doctype html>
<html lang="ja">
<head>
    <title>Index</title>
    <link href="{{mix('/css/app.css')}}" 
            rel="stylesheet" type="text/css">
    <meta name="csrf-token" content="{{ csrf_token() }}">
</head>
<body style="padding:10px;">
    <h1>Hello/Index</h1>
    <p>{{$msg}}</p>


    <app-root></app-root>
    
    <script src="{{mix('/js/app.js')}}"></script>
</body>
</html>


C:\xampp\htdocs\lara01_git\laravel_windows01\app\Http\Controllers\HelloController.php
use App\MyClasses\PowerMyService;
// PowerMyServiceをどこで使っているかわからない
    public function index(PowerMyService $service)
    {
        $data = [
            'msg' => 'This is Angular application.',
        ];
        return view('hello.index', $data);
    }
 
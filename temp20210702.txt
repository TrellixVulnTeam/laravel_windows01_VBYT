C:\xampp\htdocs\lara01_git\laravel_windows01\app\Http\Controllers\HelloController.php

<?php

namespace App\Http\Controllers;
use App\Person;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Storage;

class HelloController extends Controller
{
    private $fname;
    function __construct(){
        $this->fname = 'hello.txt';
    }
    public function index()
    {
        //$sample_msg = $this->fname;
        $sample_msg = Storage::disk('public')->url($this->fname);
        $sample_data = Storage::disk('public')->get($this->fname);
        $data = [
            'msg' => $sample_msg,
            'data' => explode(PHP_EOL,$sample_data)
        ];
        return view('hello.index',$data);
    }
    public function other($msg){
        Storage::disk('public')->prepend($this->fname,$msg);
        return redirect()->route('hello');
    }
}

    private $fname;
    function __construct(){
        $this->fname = 'hello.txt';
    }
    public function index()
    {
        //$sample_msg = $this->fname;
        $url = Storage::disk('public')->url($this->fname);
        $size = Storage::disk('public')->size($this->fname);
        $modified = Storage::disk('public')->lastModified($this->fname);
        $modified_time = date('y-m-d H:i:s',$modified);
        
        $sample_keys = ['url','size','modified'];
        $sample_meta = [$url,$size,$modified_time];

        $result = '<table><tr><th>'.implode('</th><th>', $sample_keys).'</th></tr>';
        $result .= '<tr><td>'.implode('</td><td>', $sample_meta).'</td></tr></table>';

        $sample_data = Storage::disk('public')->get($this->fname);
        $data = [
            'msg' => $result,
            'data' => explode(PHP_EOL,$sample_data)
        ];
        return view('hello.index',$data);
    }


    public function other($msg){
        Storage::disk('public')->delete('bk_'.$this->fname);
        Storage::disk('public')->copy($this->fname,'bk_'.$this->fname);

        Storage::disk('local')->delete('bk_'.$this->fname);
        Storage::disk('local')->move('public/bk_'.$this->fname,'bk_'.$this->fname);

        return redirect()->route('hello');
    }


    public function other($msg){
        if(Storage::disk('public')->exists('bk_'.$this->fname)){
            Storage::disk('public')->delete('bk_'.$this->fname);
        }
        Storage::disk('public')->copy($this->fname,'bk_'.$this->fname);
        if(Storage::disk('local')->exists('bk_'.$this->fname)){
            Storage::disk('local')->delete('bk_'.$this->fname);
        }
        Storage::disk('local')->move('public/bk_'.$this->fname,'bk_'.$this->fname);

        return redirect()->route('hello');
    }


    public function other($msg){
        return Storage::disk('public')->download($this->fname);
    }

hello/index.blade.php
	<p><a href="/hello/other">download</a></p>


        <form action="/hello/other" method="post" 
            enctype="multipart/form-data">
            @csrf
            <input type="file" name="file">
            <input type="submit">
        </form>


    public function other(Request $request){
        Storage::disk('local')->
        putFile('files', $request->file('file'));
        return redirect()->route('hello');
    }

    public function other(Request $request){
        $ext = '.'.$request->file('file')->extension();
        Storage::disk('public')->
        putFileAs('files', $request->file('file'),'uploaded'.$ext);
        return redirect()->route('hello');
    }


    public function index()
    {
        $dir = '/';
        $all = Storage::disk('local')->allfiles($dir);
        
        $data = [
            'msg'=> 'DIR: ' . $dir,
            'data'=> $all
        ];
        return view('hello.index', $data);
    }

	$all = Storage::disk('logs')->allfiles($dir);
	$all = Storage::disk('win')->allfiles($dir);
	$all = Storage::disk('ftp')->allfiles($dir);

hello/index.blade.php
<!DOCTYPE html>
<html lang="ja">
    <head>
        <meta charset="utf-8">
        <title>Index</title>
    </head>
    <body>
    	<h1>Hello/Index</h1>
    	<p>{!!$msg!!}</p>
    	<form action="/hello" method="post">
        	@csrf
        	<input type="text" name="msg">
        	<input type="submit">
    	</form>
    </body>
</html>


C:\xampp\htdocs\lara01_git\laravel_windows01\app\Http\Controllers\HelloController.php

<?php

namespace App\Http\Controllers;
use App\Person;
use Illuminate\Http\Request;
use Illuminate\Http\Response;

class HelloController extends Controller
{
    public function index(Request $request)
    {
        $msg = 'please input text:';
        if ($request->isMethod('post'))
        {
            $msg = 'you typed: "' . $request->input('msg') . '"';
        }
        $data = [
            'msg'=> $msg,
        ];
        return view('hello.index', $data);
    }
}


C:\xampp\htdocs\lara01_git\laravel_windows01\app\Http\Controllers\HelloController.php

public function index(Request $request)
    {
        $msg = 'please input text:';
        $keys = [];
        $values = [];
        if ($request->isMethod('post'))
        {
            $form = $request->all();
            $keys = array_keys($form);
            $values = array_values($form);
        }
        $data = [
            'msg'=> $msg,
            'keys' => $keys,
            'values' => $values,
        ];
        return view('hello.index', $data);
    }

hello/index.blade.php
<!DOCTYPE html>
<html lang="ja">
    <head>
        <meta charset="utf-8">
        <title>Index</title>
    </head>
    <body>
        <h1>Hello/Index</h1>
        <p>{!!$msg!!}</p>
        <form action="/hello" method="post">
            @csrf
            <div>NAME:<input type="text" name="name"></div>
            <div>MAIL:<input type="text" name="mail"></div>
            <div>TEL: <input type="text" name="tel"></div>
            <input type="submit">
        </form>
        <hr>
        <ol>
        @for($i = 0;$i < count($keys);$i++)
            <li>{{$keys[$i]}}：{{$values[$i]}}</li>
        @endfor
        </ol>
    </body>
</html>

C:\xampp\htdocs\lara01_git\laravel_windows01\app\Http\Controllers\HelloController.php

    public function index(Request $request, Response $response)
    {
        $msg = 'please input text:';
        $keys = [];
        $values = [];
        if ($request->isMethod('post'))
        {
            $form = $request->all();
            $result = '<html><body>';
            foreach($form as $key => $value)
            {
                $result .= $key . ': ' . $value . "<br>";
            }
            $result .= '</body></html>';
            $response->setContent($result);
            return $response;
        }
        $data = [
            'msg'=> $msg,
            'keys' => $keys,
            'values' => $values,
        ];
        return view('hello.index', $data);
    }


public function index(Request $request, Response $response)
{
    $msg = 'please input text:';
    $keys = [];
    $values = [];
    if ($request->isMethod('post'))
    {
        $form = $request->only(['name', 'mail']);
        $keys = array_keys($form);
        $values = array_values($form);
        $data = [
            'msg'=>'you inputted.',
            'keys'=>$keys,
            'values'=>$values,
        ];
        return view('hello.index', $data);
    }
    $data = [
        'msg'=> $msg,
        'keys'=>$keys,
        'values'=>$values,
    ];
    return view('hello.index', $data);
}



    public function index(Request $request, Response $response)
    {
        $msg = 'please input text:';
        $keys = [];
        $values = [];
        if ($request->isMethod('post'))
        {
            $form = $request->only(['name', 'mail', 'tel']);
            $keys = array_keys($form);
            $values = array_values($form);
            $msg =  old('name') . ', ' . old('mail') 
                    . ', ' . old('tel');
            $data = [
                'msg' => $msg,
                'keys' => $keys,
                'values' => $values,
            ];
            $request->flash();
            return view('hello.index', $data);
        }
        $data = [
            'msg'=> $msg,
            'keys'=>$keys,
            'values'=>$values,
        ];
            
        $request->flash();
        return view('hello.index', $data);
    }

hello/index.blade.php
        <form action="/hello" method="post">
            @csrf
            <div>NAME:<input type="text" name="name" value="{{old('name')}}"></div>
            <div>MAIL:<input type="text" name="mail" value="{{old('mail')}}"></div>
            <div>TEL: <input type="text" name="tel" value="{{old('tel')}}"></div>
            <input type="submit">
        </form>


<form action="/hello" method="get">



C:\xampp\htdocs\lara01_git\laravel_windows01\app\Http\Controllers\HelloController.php

    public function index(Request $request, Response $response)
    {
        $name = $request->query('name');
        $mail = $request->query('mail');
        $tel = $request->query('tel');
        $msg = $name . ', ' . $mail . ', ' . $tel;
        $keys = ['名前','メール','電話'];
        $values = [$name, $mail, $tel];
        $data = [
            'msg'=> $msg,
            'keys'=>$keys,
            'values'=>$values,
        ];
        $request->flash();
        return view('hello.index', $data);
    }


    public function index(Request $request, Response $response)
    {
        $name = $request->query('name');
        $mail = $request->query('mail');
        $tel = $request->query('tel');
        $msg = $request->query('msg');
        $keys = ['名前','メール','電話'];
        $values = [$name, $mail, $tel];
        $data = [
            'msg'=> $msg,
            'keys'=>$keys,
            'values'=>$values,
        ];
        $request->flash();


        return view('hello.index', $data);
    }


    public function other()
    {
        $data = [
            'name' => 'Taro',
            'mail' => 'taro@yamada',
            'tel' => '090-999-999',
        ];
        $query_str = http_build_query($data);
        $data['msg'] = $query_str;
        return redirect()->route('hello', $data);
    }


C:\xampp\htdocs\lara01_git\laravel_windows01\routes\web.php
Route::get('hello', [HelloController::class, 'index'])->name('hello');
Route::post('hello', [HelloController::class, 'index']);
Route::get('hello/other', [HelloController::class, 'other']);

C:\xampp\htdocs\lara01_git\laravel_windows01\app\MyClasses
<?php
namespace App\MyClasses;


class MyService
{
    private $msg;
    private $data;


    public function __construct()
    {
        $this->msg = 'Hello! This is MyService!';
        $this->data = ['Hello', 'Welcome', 'Bye'];
    }


    public function say()
    {
        return $this->msg;
    }


    public function data()
    {
        return $this->data;
    }
}

hello/index.blade.php
    <body>
        <h1>Hello/Index</h1>
        <p>{!!$msg!!}</p>
        <ul>
        @foreach($data as $item)
        <li>{!!$item!!}</li>
        @endforeach
        </ul>
    </body>

C:\xampp\htdocs\lara01_git\laravel_windows01\app\Http\Controllers\HelloController.php

    public function index()
    {
        $myservice = app('App\MyClasses\MyService'); // ☆
        $data = [
            'msg'=> $myservice->say(),
            'data'=> $myservice->data()
        ];
        return view('hello.index', $data);
    }


$myservice = app()->make('App\MyClasses\MyService'); // ☆
$myservice = resolve('App\MyClasses\MyService'); // ☆

C:\xampp\htdocs\lara01_git\laravel_windows01\app\MyClasses
<?php
namespace App\MyClasses;

class MyService
{
    private $id = -1;
    private $msg = 'no id...';
    private $data = ['Hello', 'Welcome', 'Bye'];


    public function __construct(int $id = -1)
    {
        if ($id >= 0)
        {
            $this->id = $id;
            $this->msg = 'select: ' . $this->data[$id];
        }
    }


    public function say()
    {
        return $this->msg;
    }


    public function data(int $id)
    {
        return $this->data[$id];
    }


    public function alldata()
    {
        return $this->data;
    }
}

C:\xampp\htdocs\lara01_git\laravel_windows01\app\Http\Controllers\HelloController.php

    public function index(int $id = -1)
    {
        $myservice = app()->makeWith('App\MyClasses\MyService', 
            ['id' => $id]);
        $data = [
            'msg'=> $myservice->say($id),
            'data'=> $myservice->alldata()
        ];
        return view('hello.index', $data);
    }

C:\xampp\htdocs\lara01_git\laravel_windows01\app\MyClasses

<?php
namespace App\MyClasses;

class MyService
{
    
    private $id = -1;
    private $msg = 'no id...';
    private $data = ['Hello', 'Welcome', 'Bye'];


    public function __construct()
    {
    }


    public function setId($id)
    {
        $this->id = $id;
        if ($id >= 0 && $id < count($this->data))
        {
            $this->msg = "select  id:" . $id
                . ', data:"' . $this->data[$id] . '"';
        }
    }


    public function say()
    {
        return $this->msg;
    }


    public function data(int $id)
    {
        return $this->data[$id];
    }


    public function alldata()
    {
        return $this->data;
    }
}


C:\xampp\htdocs\lara01_git\laravel_windows01\app\Providers\AppServiceProvider.php
use App\MyClasses\MyService;    
public function boot()
    {
        //
        app()->bind('App\MyClasses\MyService', 
                function ($app) {
            $myservice = new MyService();
            $myservice->setId(0);
            return $myservice;
        });
    }

C:\xampp\htdocs\lara01_git\laravel_windows01\routes\web.php
Route::get('hello/{id}', [HelloController::class, 'index']);
Route::get('hello', [HelloController::class, 'index']);

C:\xampp\htdocs\lara01_git\laravel_windows01\app\Http\Controllers\HelloController.php

    public function index(MyService $myservice, int $id = -1)
    {
        $myservice->setId($id);
        $data = [
            'msg'=> $myservice->say($id),
            'data'=> $myservice->alldata()
        ];
        return view('hello.index', $data);
    }

C:\xampp\htdocs\lara01_git\laravel_windows01\app\MyClasses

<?php
namespace App\MyClasses;

class MyService
{  
    private $serial;
    private $id = -1;
    private $msg = 'no id...';
    private $data = ['Hello', 'Welcome', 'Bye'];


    function __construct()
    {
        $this->serial = rand();
        echo "「" . $this->serial . "」";
    }


    public function setId($id)
    {
        $this->id = $id;
        if ($id >= 0 && $id < count($this->data))
        {
            $this->msg = "select  id:" . $id
                . ', data:"' . $this->data[$id] . '"';
        }
    }


    public function say()
    {
        return $this->msg;
    }


    public function data(int $id)
    {
        return $this->data[$id];
    }


    public function alldata()
    {
        return $this->data;
    }
    
}


C:\xampp\htdocs\lara01_git\laravel_windows01\app\Http\Controllers\HelloController.php

class HelloController extends Controller
{
    function __construct(MyService $myservice)
    {
        $myservice = app('App\MyClasses\MyService');
    }


    public function index(MyService $myservice, int $id = -1)
    {
        $myservice->setId($id);
        $data = [
            'msg'=> $myservice->say($id),
            'data'=> $myservice->alldata()
        ];
        return view('hello.index', $data);
    }
    
}

C:\xampp\htdocs\lara01_git\laravel_windows01\app\Providers\AppServiceProvider.php

    app()->singleton('App\MyClasses\MyService', 
            function ($app) {
        $myservice = new MyService();
        $myservice->setId(0);
        return $myservice;
    });


C:\xampp\htdocs\lara01_git\laravel_windows01\app\MyClasses
class MyService
    function __construct(int $id)
    {
        $this->setId($id);
        $this->serial = rand();
        echo "「" . $this->serial . "」";
    }


C:\xampp\htdocs\lara01_git\laravel_windows01\app\MyClasses
<?php
namespace App\MyClasses;


interface MyServiceInterface
{
    public function setId(int $id);
    public function say();
    public function allData();
    public function data(int $id);
}

C:\xampp\htdocs\lara01_git\laravel_windows01\app\Providers\AppServiceProvider.php

    public function boot()
    {
        //
        app()->bind('App\MyClasses\MyServiceInterface',
        'App\MyClasses\MyService');
    }

C:\xampp\htdocs\lara01_git\laravel_windows01\app\MyClasses
MyService.php
<?php
namespace App\MyClasses;

class MyService implements MyServiceInterface{
    private $serial;
    private $id = -1;
    private $msg = 'no id...';
    private $data = ['Hello', 'Welcome', 'Bye'];


    function __construct()
    {
        $this->serial = rand();
        echo "「" . $this->serial . "」";
    }


    public function setId($id)
    {
        $this->id = $id;
        if ($id >= 0 && $id < count($this->data))
        {
            $this->msg = "select  id:" . $id
                . ', data:"' . $this->data[$id] . '"';
        }
    }


    public function say()
    {
        return $this->msg;
    }


    public function data(int $id)
    {
        return $this->data[$id];
    }


    public function alldata()
    {
        return $this->data;
    }
    
}

MyServiceInterface.php
<?php
namespace App\MyClasses;

interface MyServiceInterface
{
    public function setId(int $id);
    public function say();
    public function allData();
    public function data(int $id);
}

C:\xampp\htdocs\lara01_git\laravel_windows01\app\Providers\AppServiceProvider.php
use App\MyClasses\MyService;
use App\MyClasses\MyServiceInterface; 

    public function boot()
    {
        //
        app()->bind('App\MyClasses\MyServiceInterface','App\MyClasses\MyService');
    }


C:\xampp\htdocs\lara01_git\laravel_windows01\app\MyClasses
PowerMyService.php
<?php
namespace App\MyClasses;


class PowerMyService implements MyServiceInterface
{  
    private $id = -1;
    private $msg = 'no id...';
    private $data = ['いちご','リンゴ','バナナ','みかん','ぶどう'];


    function __construct()
    {
        $this->setId(rand(0, count($this->data)));
    }


    public function setId($id)
    {
        if ($id >= 0 && $id < count($this->data))
        {
            $this->id = $id;
            $this->msg = "あなたが好きなのは、" . $id
                . '番の' . $this->data[$id] . 'ですね！';
        }
    }


    public function say()
    {
        return $this->msg;
    }


    public function data(int $id)
    {
        return $this->data[$id];
    }
    public function setData($data)
    {
        $this->data = $data;
    }


    public function alldata()
    {
        return $this->data;
    }
    
}

C:\xampp\htdocs\lara01_git\laravel_windows01\app\Providers\AppServiceProvider.php

    public function boot()
    {
        //
        app()->bind('App\MyClasses\MyServiceInterface','App\MyClasses\PowerMyService');
    }

use App\MyClasses\PowerMyService;

    public function boot()
    {
        //

        app()->resolving(function ($obj, $app) {
            if (is_object($obj))
            {
                echo get_class($obj) . '<br>';
            }
            else
            {
                echo $obj . '<br>';
            }
            
        });
        
        app()->resolving(PowerMyService::class, function ($obj, $app) {
            $newdata = ['ハンバーグ','カレーライス','唐揚げ','餃子'];
            $obj->setData($newdata);
            $obj->setId(rand(0, count($newdata)));
        });

        app()->singleton('App\MyClasses\MyServiceInterface',
            'App\MyClasses\PowerMyService');

    }

php artisan make:provider MyServiceProvider

C:\xampp\htdocs\lara01_git\laravel_windows01\app\Providers
MyServiceProvider.php
<?php

namespace App\Providers;

use Illuminate\Support\ServiceProvider;

class MyServiceProvider extends ServiceProvider
{
    public function register()
    {
        app()->singleton('App\MyClasses\MyServiceInterface',
            'App\MyClasses\PowerMyService');
        echo "<b>＜MyServiceProvider/register＞</b><br>";
    }


    public function boot()
    {
        echo "<b>＜MyServiceProvider/boot＞</b><br>";
    }
}

C:\xampp\htdocs\lara01_git\laravel_windows01\config
app.php
App\Providers\MyServiceProvider::class,

C:\xampp\htdocs\lara01_git\laravel_windows01\app\Http\Controllers\HelloController.php

class HelloController extends Controller
{


    public function index(MyServiceInterface $myservice, int $id = -1)
    {
        $myservice->setId($id);
        $data = [
            'msg'=> $myservice->say(),
            'data'=> $myservice->alldata()
        ];
        return view('hello.index', $data);
    }
    
}

C:\xampp\htdocs\lara01_git\laravel_windows01\app\Facades
MyService.php
<?php
namespace App\Facades;


use Illuminate\Support\Facades\Facade;


class MyService extends Facade {


    protected static function getFacadeAccessor() {
        return 'myservice';
    }
    
}

C:\xampp\htdocs\lara01_git\laravel_windows01\config
app.php
'myservice' => App\Facades\MyService::class,

C:\xampp\htdocs\lara01_git\laravel_windows01\app\Providers
MyServiceProvider.php
    public function register()
    {
        app()->singleton('myservice',
            'App\MyClasses\PowerMyService');
        app()->singleton('App\MyClasses\MyServiceInterface',
            'App\MyClasses\PowerMyService');
        echo "<b>＜MyServiceProvider/register＞</b><br>";
    }

C:\xampp\htdocs\lara01_git\laravel_windows01\app\Providers\AppServiceProvider.php


    public function boot()
    {
        //

        app()->singleton('myservice',
            'App\MyClasses\PowerMyService');

    }


php artisan make:middleware MyMiddleware


C:\xampp\htdocs\lara01_git\laravel_windows01\app\Http\Middleware
MyMiddleware.php
class MyMiddleware
{


    public function handle($request, Closure $next)
    {
        $id = rand(0, count(MyService::alldata()));
        MyService::setId($id);
        $merge_data = [
            'id'=>$id,
            'msg'=>MyService::say(), 
            'alldata'=>MyService::alldata()
        ];
        $request->merge($merge_data);


        return $next($request);
    }


}


C:\xampp\htdocs\lara01_git\laravel_windows01\app\Http\Controllers\HelloController.php

<?php

namespace App\Http\Controllers;
use Illuminate\Http\Request;

class HelloController extends Controller
{


    public function index(Request $request)
    {
        $data = [
            'msg'=> $request->msg,
            'data'=> $request->alldata,
        ];
        return view('hello.index', $data);
    }
    
}

C:\xampp\htdocs\lara01_git\laravel_windows01\app\Http
Kernel.php

        'MyMW' => [
            \App\Http\Middleware\HelloMiddleware::class,
            \App\Http\Middleware\MyMiddleware::class,
        ],

C:\xampp\htdocs\lara01_git\laravel_windows01\routes\web.php
Route::get('hello/{id}', [HelloController::class, 'index'])->middleware('MyMW');
Route::get('hello', [HelloController::class, 'index'])->middleware('MyMW');

C:\xampp\htdocs\lara01_git\laravel_windows01\app\Http\Controllers\HelloController.php

<?php

namespace App\Http\Controllers;
use Illuminate\Http\Request;

class HelloController extends Controller
{


    public function index(Request $request)
    {
        $data = [
            'msg'=> $request->hello,
            'data'=> $request->alldata,
        ];
        return view('hello.index', $data);
    }

}


C:\xampp\htdocs\lara01_git\laravel_windows01\resources\views\hello
index.blade.php
<body>
    <h1>Hello/Index</h1>
    <p>{{$msg}}</p>
    <ol>
    @foreach($data as $item)
    <li>{{$item->name}} [{{$item->mail}}, 
        {{$item->age}}]</li>
    @endforeach
    </ol>
    <hr>
</body>

C:\xampp\htdocs\lara01_git\laravel_windows01\app\Http\Controllers\HelloController.php

<?php

namespace App\Http\Controllers;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\DB;

class HelloController extends Controller
{


    public function index()
    {
        $result = DB::table('people')->get();
        $data = [
            'msg' => 'Database access.',
            'data' => $result,
        ];
        return view('hello.index', $data);
    }

}

C:\xampp\htdocs\lara01_git\laravel_windows01\routes\web.php
Route::get('hello', [HelloController::class, 'index']);
Route::get('hello/{id}', [HelloController::class, 'index']);

C:\xampp\htdocs\lara01_git\laravel_windows01\app\Http\Controllers\HelloController.php

    public function index($id = -1)
    {
        if ($id >= 0)
        {
            $msg = 'get ID <= ' . $id;
            $result = DB::table('people')
                ->where('id','<=', $id)->get();
        }
        else
        {
            $msg = 'get people records.';
            $result = DB::table('people')->get();
        }
        $data = [
            'msg' => $msg,
            'data' => $result,
        ];
        return view('hello.index', $data);
    }

    public function index($id = -1)
    {
        if ($id >= 0)
        {
            $msg = 'get name like "' . $id . '".';
            $result = DB::table('people')
                ->where('name','like', '%' . $id . '%')->get();
        }
        else
        {
            $msg = 'get people records.';
            $result = DB::table('people')->get();
        }
        $data = [
            'msg' => $msg,
            'data' => $result,
        ];
        return view('hello.index', $data);
    }

    public function index()
    {
        $msg = 'get people records.';
        $first = DB::table('people')->first();
        $last = DB::table('people')->orderBy('id','desc')->first();
        $result = [$first, $last];


        $data = [
            'msg' => $msg,
            'data' => $result,
        ];
        return view('hello.index', $data);
    }

    public function index($id = -1)
    {
        if ($id >= 0)
        {
            $msg = 'get name like "' . $id . '".';
            $result = [DB::table('people')->find($id)];
        }
        else
        {
            $msg = 'get people records.';
            $result = DB::table('people')->get();
        }
        $data = [
            'msg' => $msg,
            'data' => $result,
        ];
        return view('hello.index', $data);
    }

    public function index()
    {
        $name = DB::table('people')->pluck('name');
        $value = $name->toArray();
        $msg = implode(', ', $value); 
        $result = DB::table('people')->get();


        $data = [
            'msg' => $msg,
            'data' => $result,
        ];
        return view('hello.index', $data);
    }